#summary How AudioManager works and how to use it.

= Introduction =
Sonetto has an audio manager that is responsible for managing audio resources and abstracting the underlying audio libraries used to decompress and play audio data.

= Audio Concepts =
This audio manager has three audio concepts: Audio Listeners, Musics and Sounds. Each of these concepts will be explained before we get into the "how to use" part of this wiki page.

== Audio Listeners ==
An Audio Listener, for those not used to 3D audio, is a point in 3D space used to calculate each audio source's 2D channel panning. This panning is used by our brain to figure from where the sound is coming. They can be attached to events or to the current camera.

== Musics ==
Musics are divided into two types: Background Musics and Music Effects.
Background Musics are musics that loop indefinitely until you want them to stop. They have a loop point from which the music will start playing when the stream ends. This is used to make seamless looping possible without letting go of music introductions, which are needed to make it easier to loop and still make the music sound good. Background Musics can fade in and out when you ask them to start and stop playing.
Music Effects, contrary to Background Musics, don't use the music loop point and never fade. They are played only once. If there is a background music playing when a Music Effect is asked to play, this background music will be faded out and faded back in from the point it stopped when the Music Effect ends.
It is important to note that fading is always optional. If you supply a fading speed of zero to any method that uses fading, the proposed changes will be taken instantly, without fading. Also keep in mind that musics are always following the audio listener, so they seem like they don't have a position in space.
From here on, we will use the term BGM to refer to Background Musics and ME to Music Effects.

== Sounds ==
Sounds are short pieces of audio data, such as attack, door/chest opening, footstep sounds, etc. They are generally loaded and unloaded upon module and map changing. These sounds can be attached to Ogre::Nodes, so that its position is inherited from it. This way you can attach sound sources to your Ogre::SceneNodes or even to your meshes' bones, if needed. By default, sound sources are attached to audio listener (i.e. they will sound the same everywhere, like musics).

= Using the AudioManager =
The AudioManager can be accessed through `Kernel::get()->getAudioMan()`.
The MusicStream can be accessed through `Kernel::get()->getAudioMan()->getMusicStream()`.

== Changing settings ==
You can attach the audio listener to an Ogre::Node by using `void AudioManager::setListenerNode(Ogre::Node *node)`, and retrieve this value using `Ogre::Node *AudioManager::getListenerNode()`. The supplied `node` can be NULL, in which case the listener will inherit the positions of the current module's camera.
You can configure the master music and sound volume using:
{{{
void AudioManager::setMasterMusicVolume(float volume);
float AudioManager::getMasterMusicVolume() const;
void AudioManager::setMasterSoundVolume(float volume);
float AudioManager::getMasterSoundVolume() const;
}}}

Beware that changing these values manually during gameplay is highly discouraged. They are chosen by the user in the configuration file, and _must_ be respected. They are the maximum volume the music and the sounds will reach.

There is the maximum volume, however, that is not user-configurable, and is intended to be changed internally by the game. This maximum volume of the musics can be accessed through:
{{{
void MusicStream::setMaxVolume(float vol);
float MusicStream::getMaxVolume() const;
}}}

And the maximum volume of the sounds is local. That is, there is a maximum volume for each sound source you create. They can be accessed through:
{{{
void SoundSource::setMaxVolume(float maxVolume);
float SoundSource::getMaxVolume() const;
}}}

Of course, these maximum volumes are subject to their respective master volumes.

== Playing musics ==
The music and sound IDs are indexes inside the Database.
BGMs can be played using `void AudioManager::playBGM(size_t id,float aFadeOut,float aFadeIn)`. The `aFadeOut` argument determines the speed in which the current BGM should be faded out before starting the desired music, and the `aFadeIn` argument determines the speed in which the desired BGM will fade in.